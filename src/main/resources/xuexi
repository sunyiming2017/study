栈内存：存放的是堆内存的内存地址。
堆内存：存放的是创建的对象的信息。

引用传递：同一个堆内存可以被不同的栈内存指向。传递的是对象的内存地址，对对象的内容修改
原对象的内容会进行改变。

垃圾回收器：定期进行回收并释放无用的内存空间。

设置属性为private 私有，则对其他类是不可见的。

构造方法作用之一可以实现实例化对象的初始化。一个类默认会提供一个无参构造方法。但是在类中已经明确定义一个有参的构造方法，那么无参构造方法不会被自定义
创建。

为什么构造方法不定义返回值类型呢？通过编译器识别你的代码结构，如果加上返回值类型就会按照普通方法来执行，
并不会按照构造方法识别，构造方法是对象实例化时为属性设置初始化值，方法是在对象实例化之后调用的。

 为了区别类中的属性与参数的区别，在类中的属性中加上this.关键字

构造方法中执行，this（），代表构造方法的调用，只能放到构造方法中，并且是需要放到第一行代码。

 java代码块的执行顺序。
静态代码块优先于构造代码块执行。
静态代码块优先于主方法执行。

int[] data = new int[]{1,1,1};
int[] dd = new int[]{};

程序的逆序输出，程序的按大小顺序排序。

 在实例化子类的同时，一定会实例父类。先调用父类信息在调用子类信息。
super（），必须放在构造方法首行。代表父类构造。
this（）必须放在构造方法首行。代表本类构造方法。
子类如果调用父类的方法的时候直接用super.方法名(),调用父类方法。
this和super的区别？
this代表的是本类对象
this能够先从本类中调用方法，本类找不到在从父类中去找
super不从本类中去找，从父类中找能够调用的方法。
this() 代表本类构造方法，super()代表父类构造方法。

final修饰变量为常量不能被修改。

多态简介：
	方法的多样性：同一种事物通过子类继承能够展现出不同的形态。

	对象的多样性：父子实例的转换处理。
向上转型：子类直接转换成父类。
向下转型：父类强制转换成子类。

子类可以对父类进行功能的扩充，实现多态的一种方式。
instanceof可以进行向下转型使用。

Object，属于终极类，所有类都是Object类的子类。
工厂模式：

在以后，多线程的实现优先考虑Runnable接口。

在进行启动多线程时，调用start()方法，由start方法调用run()方法，完成多线程的执行。
多线程的开发，多个线程可以对同一资源进行抢占，Thread主要描述的时线程，资源的描述是通过

Callable :  多线程根据传入的泛型带有返回值。


若干个线程访问同一资源，进行同步资源访问，会产生死锁的可能。
Volatile   ：
	获取变量原有的数据内容副本。
	利用副本为变量进行数学运算。

 CharSequence是一个字符串结构的接口。在这个接口中一般有3个类。
Gc是垃圾回收机制，由系统自动调用，或者通过Runtime手工调用

Optional ,进行null的相关类的处理
Base64加密与解密
	Base64.getEncoder().encode(msg.getByte());

红黑树的原理：
	平衡二叉树：
红黑树的特点：
1.每个节点或者是黑色或者是红色。
2.根节点必须是黑色。
3.每个叶子节点是黑色。
4.如果一个节点是红色的，那么它的子节点必须是黑色的。
红色节点之后，必须是黑色节点，但黑色节点之后没说不能为黑色节点。

Java反射机制：

反射与单例设计模式：

类加载器：
	通过ClassLoader来获取，
	根加载器bootstrap
	平台加载器；1.8及以前的版本是扩展加载器
	应用程序加载器。
先进行找应用程序加载器，之后在找平台加载器，在找根加载器。最后是自定义加载器。
双亲委派的加载机制是对于系统已经定义的类，自定义加载器是不会加载，为了保证系统的安全性。
但是与系统不重名的类，自定义加载器可以进行加载。

代理模式设计：
传统代理设计：必须有接口。
静态代理：
CGLIB动态代理。










